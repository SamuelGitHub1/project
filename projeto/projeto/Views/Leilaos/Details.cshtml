@inject projeto.Data.ApplicationDbContext _context
@model projeto.Models.Leilao
@using Microsoft.EntityFrameworkCore

@{
    var english = Context.Request.Cookies["language"] == "en" || Context.Request.Cookies["language"] == null;
    ViewData["Title"] = english ? "Auction Details" : "Detalhes do Leilão";
    var loggedUserId = ViewData["UserId"] as int?;
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}

@{
    var userEmail = Context.Session.GetString("UserEmail");
    var isOwner = Model.UtilizadorId == ViewData["UserId"] as int?;
    var ownerName = _context.Utilizador
        .Where(u => u.UtilizadorId == Model.UtilizadorId)
        .Select(u => u.Nome)
        .FirstOrDefault();

    var vencedorNome = _context.Utilizador
        .Where(u => u.Nome == Model.Vencedor)
        .Select(u => u.Nome)
        .FirstOrDefault();
}


<div class="auction-container">
    <h1 class="auction-title">@Model.Item.Titulo</h1>

    <div class="auction-content">
        <div class="auction-image">
            <img src="@Url.Content(Model.Item.FotoUrl)" alt="@Model.Item.Titulo" />
            <div class="current-bid">
                <p class="card-text">
                    @(Model.EstadoLeilao == EstadoLeilao.Encerrado ? (english ? "Final Bid:" : "Lance Final:") : (english ? "Current Bid:" : "Lance Atual:"))
                    <b>@Model.ValorAtualLance.ToString("C")</b>
                </p>

                @if (Model.EstadoLeilao == EstadoLeilao.Encerrado)
                {
                    <p class="winner-info">
                        @if (!string.IsNullOrEmpty(Model.Vencedor))
                        {
                            <strong>@(english ? "Congrats to the winner!!" : "Parabéns ao vencedor!!")</strong> 
                        }
                        else
                        {
                            <strong class="text-danger">@(english ? "No winners" : "Não houve vencedores")</strong>
                        }
                    </p>
                }
            </div>
        </div>

        <div class="auction-details">
            <h2>@(english ? "Product Description:" : "Descrição do Produto:") </h2>
            <p>@Model.Item.Descricao</p>
            <p><strong>@(english ? "Category:" : "Categoria:")</strong> @Model.Item.Categoria</p>
            <p><strong>@(english ? "Sustainable:" : "Sustentável:")</strong> @(Model.Item.Categoria == 0 ? "✅" : "⬜")</p>
            <p class="end-time" data-endtime="@Model.DataFim.ToString("yyyy-MM-ddTHH:mm:ss")">
                <strong>@(english ? "Time left:" : "Tempo restante:")</strong> <span class="countdown"></span>
            </p>
            <p><strong>@(english ? "Minimum increment:" : "Incremento mínimo:")</strong> @Model.ValorIncrementoMinimo.ToString("C")</p>
            <p><strong>@(english ? "Owner:" : "Proprietário:")</strong> @ownerName</p>

            @if (Model.EstadoLeilao != EstadoLeilao.Encerrado)
            {
                <form asp-action="FazerLicitacaoDetails" method="post">
                    <input type="hidden" name="leilaoId" value="@Model.LeilaoId" />
                    <input type="number" name="valorLicitacao" step="0.01" placeholder="@(english ? "Place bid" : "Fazer lance")" required />

                    <button type="submit" class="bid-button" @(isOwner ? "disabled" : "")>
                        @(english ? "Place Bid" : "Fazer Lance")
                    </button>

                    @if (TempData["BidError"] != null)
                    {
                        <span class="text-danger d-block mt-2">@TempData["BidError"]</span>
                    }
                </form>
            }

            <button id="btnShowBids" class="toggle-bids">@(english ? "View Bids" : "Ver Licitações")</button>
            <div id="bidsList" class="bids-list" style="display:none;">
                <h3>@(english ? "Bids" : "Licitações")</h3>
                <table>
                    <thead>
                        <tr>
                            <th>@(english ? "User Id " : "Utilizador Id")</th>
                            <th>@(english ? "Amount " : "Valor")</th>
                            <th>@(english ? "Date" : "Data")</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var licitacoes = _context.Licitacoes
                            .Where(l => l.LeilaoId == Model.LeilaoId)
                            .Include(l => l.Utilizador)
                            .OrderByDescending(l => l.ValorLicitacao)
                            .ToList();
                        }
                        @foreach (var licitacao in licitacoes)
                        {
                            <tr>
                                <td>@licitacao.Utilizador.UtilizadorId</td>
                                <td>@licitacao.ValorLicitacao.ToString("C")</td>
                                <td>@licitacao.DataLicitacao.ToString("dd/MM/yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <script>
                document.getElementById("btnShowBids").onclick = function () {
                    var bidsList = document.getElementById("bidsList");
                    bidsList.style.display = (bidsList.style.display === "none") ? "block" : "none";
                };
            </script>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        function updateCountdowns() {
            document.querySelectorAll(".end-time").forEach(function (element) {
                let endTime = new Date(element.getAttribute("data-endtime")).getTime();
                let now = new Date().getTime();
                let timeLeft = endTime - now;

                if (timeLeft > 0) {
                    let days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                    let hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    let minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                    let seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

                    element.querySelector(".countdown").textContent =
                        `${days}d ${hours}h ${minutes}m ${seconds}s`;
                } else {
                    element.querySelector(".countdown").textContent = "Leilão Encerrado";
                }
            });
        }

        updateCountdowns();
        setInterval(updateCountdowns, 1000);
    });
</script>
